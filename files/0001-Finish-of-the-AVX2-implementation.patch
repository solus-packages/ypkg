From dc9b5559d01c659567f1b0d9a2d95e9ba2396b25 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Sun, 30 Oct 2016 11:33:20 +0000
Subject: [PATCH] Finish of the AVX2 implementation

With this change we now build AVX2 libraries for both 32-bit and 64-bit
builds, and do not make them dependent on a particular base CPU. The
base level is determined by the CPU features only.

With the glibc changes in Solus, adapted from Clear Linux, these avx2
libraries will only be loaded when glibc detects that it is ok to do so.
Another minor change was to stop using /emul32 prefix on 32-bit builds,
as they are always done first they always get overriden.

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 ypkg2/examine.py     |  3 ++-
 ypkg2/main.py        |  9 +++++++--
 ypkg2/packages.py    |  2 ++
 ypkg2/scripts.py     |  7 +++++--
 ypkg2/ypkgcontext.py | 32 +++++++++++++-------------------
 5 files changed, 29 insertions(+), 24 deletions(-)

diff --git a/ypkg2/examine.py b/ypkg2/examine.py
index ce3408b..4b76f13 100644
--- a/ypkg2/examine.py
+++ b/ypkg2/examine.py
@@ -329,7 +329,8 @@ class PackageExaminer:
         if pretty.startswith("/emul32"):
             return True
         # Nuke AVX2 dir .a files with no remorse
-        if pretty.startswith("/usr/lib64/avx2/"):
+        if (pretty.startswith("/usr/lib64/avx2/") or
+                pretty.startswith("/usr/lib32/avx2/")):
             if ".so" not in pretty:
                 return True
             # Don't want .so links, they're useless.
diff --git a/ypkg2/main.py b/ypkg2/main.py
index 566003b..2f028e5 100644
--- a/ypkg2/main.py
+++ b/ypkg2/main.py
@@ -241,7 +241,12 @@ def build_package(filename, outputDir):
 
     possible_sets = []
     # Emul32 is *always* first
+    # AVX2 emul32 comes first too so "normal" emul32 can override it
     if spec.pkg_emul32:
+        if spec.pkg_avx2:
+            # Emul32, avx2 build
+            possible_sets.append((True, True))
+        # Normal, no-avx2, emul32 build
         possible_sets.append((True, False))
 
     # Build AVX2 before native, but after emul32
@@ -277,10 +282,10 @@ def build_package(filename, outputDir):
     for emul32, avx2, run in r_runs:
         if emul32:
             console_ui.emit_info("Build", "Building for emul32")
-        elif avx2:
-            console_ui.emit_info("Build", "Building for AVX2 optimisations")
         else:
             console_ui.emit_info("Build", "Building native package")
+        if avx2:
+            console_ui.emit_info("Build", "Building for AVX2 optimisations")
 
         for step, context in run:
             # When doing setup, always do pre-work by blasting away any
diff --git a/ypkg2/packages.py b/ypkg2/packages.py
index efe6a01..b93d279 100644
--- a/ypkg2/packages.py
+++ b/ypkg2/packages.py
@@ -142,6 +142,8 @@ class PackageGenerator:
         self.add_pattern("/usr/lib32/", "32bit")
         self.add_pattern("/usr/lib32/lib*.so.*", "32bit",
                          priority=PRIORITY_DEFAULT+1)
+        self.add_pattern("/usr/lib32/avx2/*.so*", "32bit",
+                         priority=PRIORITY_DEFAULT+1)
 
         self.add_pattern("/usr/share/locale", "main")
         self.add_pattern("/usr/share/doc", "main")
diff --git a/ypkg2/scripts.py b/ypkg2/scripts.py
index 3c90acb..425a730 100644
--- a/ypkg2/scripts.py
+++ b/ypkg2/scripts.py
@@ -105,9 +105,12 @@ class ScriptGenerator:
     def init_default_macros(self):
 
         if self.context.emul32:
-            self.define_macro("libdir", "/usr/lib32")
+            if self.context.avx2:
+                self.define_macro("libdir", "/usr/lib32/avx2")
+            else:
+                self.define_macro("libdir", "/usr/lib32")
             self.define_macro("LIBSUFFIX", "32")
-            self.define_macro("PREFIX", "/emul32")
+            self.define_macro("PREFIX", "/usr")
         else:
             # 64-bit AVX2 build in subdirectory
             if self.context.avx2:
diff --git a/ypkg2/ypkgcontext.py b/ypkg2/ypkgcontext.py
index d609875..2d87f15 100644
--- a/ypkg2/ypkgcontext.py
+++ b/ypkg2/ypkgcontext.py
@@ -27,8 +27,7 @@ PGO_USE_FLAGS = "-fprofile-use -fprofile-dir=\"{}\" -fprofile-correction"
 BIND_NOW_FLAGS = ["-Wl,-z,now"]
 
 # AVX2/Haswell optimisations
-AVX2_ARCH = "haswell"
-AVX2_TUNE = "haswell"
+AVX2_FLAGS = "-msse3 -mssse3 -msse4 -msse4.1 -msse4.2 -mavx -mavx2"
 
 
 class Flags:
@@ -186,7 +185,10 @@ class YpkgContext:
         """ Get the build directory for the given package """
         buildSuffix = "build"
         if self.avx2:
-            buildSuffix = "build-avx2"
+            if self.emul32:
+                buildSuffix = "build-32-avx2"
+            else:
+                buildSuffix = "build-avx2"
         elif self.emul32:
             buildSuffix = "build-32"
 
@@ -199,7 +201,10 @@ class YpkgContext:
         """ Get the PGO data directory for the given package """
         pgoSuffix = "pgo"
         if self.avx2:
-            pgoSuffix = "pgo-avx2"
+            if self.emul32:
+                pgoSuffix = "pgo-32-avx2"
+            else:
+                pgoSuffix = "pgo-avx2"
         elif self.emul32:
             pgoSuffix = "pgo-32"
 
@@ -208,17 +213,6 @@ class YpkgContext:
                                 self.spec.pkg_name,
                                 pgoSuffix))
 
-    def repl_flags_avx2(self, flags):
-        """ Adjust flags to compensate for avx2 build """
-        ncflags = list()
-        for flag in flags:
-            if flag.startswith("-march="):
-                flag = "-march={}".format(AVX2_ARCH)
-            elif flag.startswith("-mtune="):
-                flag = "-mtune={}".format(AVX2_TUNE)
-            ncflags.append(flag)
-        return ncflags
-
     def init_config(self):
         """ Initialise our configuration prior to building """
         conf = pisi.config.Config()
@@ -278,10 +272,10 @@ class YpkgContext:
                 self.build.cc = "gcc -m32"
                 self.build.cxx = "g++ -m32"
 
-        # Adjust flags for AVX2 build (currently Haswell+ specific)
+        # Adjust flags for AVX2 builds
         if self.avx2:
-            self.build.cflags = self.repl_flags_avx2(self.build.cflags)
-            self.build.cxxflags = self.repl_flags_avx2(self.build.cxxflags)
+            self.build.cflags.extend(AVX2_FLAGS.split(" "))
+            self.build.cxxflags.extend(AVX2_FLAGS.split(" "))
 
         # Set the $pkgfiles up properly
         spec_dir = os.path.dirname(os.path.abspath(self.spec.path))
@@ -314,7 +308,7 @@ class YpkgContext:
         self.build.cxxflags = Flags.pgo_use_flags(self.build.cxxflags, pgo_dir)
 
     def clean_pgo(self):
-        suffixes = ["pgo", "pgo-avx2", "pgo-32"]
+        suffixes = ["pgo", "pgo-avx2", "pgo-32", "pgo-32-avx2"]
         pgo_dirs = [os.path.abspath("{}/root/{}/{}".format(
                     self.get_build_prefix(),
                     self.spec.pkg_name, x)) for x in suffixes]
-- 
2.10.1

