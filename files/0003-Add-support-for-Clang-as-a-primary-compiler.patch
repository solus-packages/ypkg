From 53badda6312ca62f4fed52d40be69c648b048fa9 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Sat, 3 Jun 2017 14:25:23 +0100
Subject: [PATCH 3/6] Add support for Clang as a primary compiler

This change set fully supports Clang by providing Clang specific
"speed" flags for Solus, more in line with how Clang itself functions.
Additionally we add LLVM specific profiling options that enable us to
perform Profile Guided Optimisation using Clang in an automated and
sensible fashion. As before, users only need to create a profile step
in their ypkg YML file.

Lastly, we now enable LTO by default for Clang, as it seems better suited
to it than our experiments with GCC.

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 ypkg2/main.py        | 25 ++++++++++++++++++++
 ypkg2/rc.yml         | 10 ++++++++
 ypkg2/ypkgcontext.py | 64 ++++++++++++++++++++++++++++++++++++++++------------
 3 files changed, 84 insertions(+), 15 deletions(-)

diff --git a/ypkg2/main.py b/ypkg2/main.py
index f7fffa2..0c32d4f 100644
--- a/ypkg2/main.py
+++ b/ypkg2/main.py
@@ -118,6 +118,20 @@ def execute_step(context, step, step_n, work_dir):
         script.define_export("PKG_CONFIG_PATH", EMUL32PC)
     if context.avx2:
         script.define_export("AVX2BUILD", "1")
+    extraScript = None
+
+    # Handle the anal nature of llvm profiling
+    if context.gen_pgo and context.spec.pkg_clang:
+        profileFile = os.path.join(context.get_pgo_dir(),
+                                   "default-%m.profraw")
+        script.define_export("LLVM_PROFILE_FILE", profileFile)
+        script.define_export("YPKG_PGO_DIR", context.get_pgo_dir())
+    elif context.use_pgo and context.spec.pkg_clang:
+        profileFile = os.path.join(context.get_pgo_dir(),
+                                   "default.profdata")
+        extraScript = "%llvm_profile_merge"
+        script.define_export("LLVM_PROFILE_FILE", profileFile)
+        script.define_export("YPKG_PGO_DIR", context.get_pgo_dir())
 
     exports = script.emit_exports()
 
@@ -129,6 +143,8 @@ def execute_step(context, step, step_n, work_dir):
 
     # Add our exports
     full_text += "\n".join(exports)
+    if extraScript:
+        full_text += "\n\n{}\n".format(extraScript)
     full_text += "\n\n{}\n".format(step)
     output = script.escape_string(full_text)
 
@@ -309,6 +325,15 @@ def build_package(filename, outputDir):
                                               "Cannot extract sources")
                         sys.exit(1)
 
+                if spec.step_profile:
+                    try:
+                        if not os.path.exists(context.get_pgo_dir()):
+                            os.makedirs(context.get_pgo_dir(), 00755)
+                    except Exception as e:
+                        console_ui.emit_error("Source", "Error creating dir")
+                        print(e)
+                        sys.exit(1)
+
             work_dir = manager.get_working_dir(context)
             if not os.path.exists(work_dir):
                 try:
diff --git a/ypkg2/rc.yml b/ypkg2/rc.yml
index ee90a10..58d262a 100644
--- a/ypkg2/rc.yml
+++ b/ypkg2/rc.yml
@@ -113,6 +113,16 @@ actions:
         ./waf build --jobs="%YJOBS%"
     - waf_install: |
         ./waf install --jobs="%YJOBS%" --destdir="%installroot%"
+    - llvm_profile_merge: |
+        if [[ -d "$YPKG_PGO_DIR" ]]; then
+            pushd "$YPKG_PGO_DIR"
+            if [[ ! -e default.profdata ]]; then
+                llvm-profdata merge -output=default.profdata default-*.profraw
+            fi
+            popd
+        else
+            echo "\n\nError: Profiling requested by ypkg but doesn't exist\n\n"
+        fi
 defines:
     - CONFOPTS: |
         --prefix=%PREFIX% --build=%HOST% --libdir=%libdir% --mandir=/usr/share/man \
diff --git a/ypkg2/ypkgcontext.py b/ypkg2/ypkgcontext.py
index 2fdae5c..b6b4396 100644
--- a/ypkg2/ypkgcontext.py
+++ b/ypkg2/ypkgcontext.py
@@ -17,14 +17,28 @@ import pisi.config
 import os
 import shutil
 
-# These flag sets are originally courtesy of autospec in
+# This speed flag set was originally from autospec in
 # Clear Linux Project For Intel Architecture.
 SPEED_FLAGS = "-ffunction-sections -fno-semantic-interposition -O3 " \
               "-falign-functions=32"
+
+# Clang defaults to -fno-semantic-interposition behaviour but doesn't have a
+# CLI flag to control it. It also does a better job on function alignment.
+SPEED_FLAGS_CLANG = "-ffunction-sections -fdata-sections -flto -O3"
+
+BIND_NOW_FLAGS = ["-Wl,-z,now", "-Wl,-z -Wl,relro", "-Wl,-z -Wl,now"]
+
+# Allow optimizing for size
 SIZE_FLAGS = "-Os -ffunction-sections"
+
+# GCC PGO flags
 PGO_GEN_FLAGS = "-fprofile-generate -fprofile-dir=\"{}\""
 PGO_USE_FLAGS = "-fprofile-use -fprofile-dir=\"{}\" -fprofile-correction"
-BIND_NOW_FLAGS = ["-Wl,-z,now", "-Wl,-z -Wl,relro", "-Wl,-z -Wl,now"]
+
+# Clang can handle parameters to the args unlike GCC
+PGO_GEN_FLAGS_CLANG = "-fprofile-instr-generate=\"{}/default-%m.profraw\""
+PGO_USE_FLAGS_CLANG = "-fprofile-instr-use=\"{}/default.profdata\" " \
+                      "-fprofile-correction"
 
 # AVX2
 AVX2_FLAGS = "-mavx2"
@@ -55,7 +69,7 @@ class Flags:
         return nflags
 
     @staticmethod
-    def optimize_flags(f, opt_type):
+    def optimize_flags(f, opt_type, clang=False):
         """ Optimize this flag set for a given optimisation type """
         optimisations = ["-O%s" % x for x in range(0, 4)]
         optimisations.extend("-Os")
@@ -63,7 +77,10 @@ class Flags:
         newflags = Flags.filter_flags(f, optimisations)
 
         if opt_type == "speed":
-            newflags.extend(SPEED_FLAGS.split(" "))
+            if clang:
+                newflags.extend(SPEED_FLAGS_CLANG.split(" "))
+            else:
+                newflags.extend(SPEED_FLAGS.split(" "))
         elif opt_type == "size":
             newflags.extend(SIZE_FLAGS.split(" "))
         elif opt_type == "no-bind-now":
@@ -75,17 +92,19 @@ class Flags:
         return newflags
 
     @staticmethod
-    def pgo_gen_flags(f, d):
+    def pgo_gen_flags(f, d, clang=False):
         """ Update flags with PGO generator flags """
         r = list(f)
-        r.extend((PGO_GEN_FLAGS.format(d).split(" ")))
+        flagSet = PGO_GEN_FLAGS if not clang else PGO_GEN_FLAGS_CLANG
+        r.extend((flagSet.format(d).split(" ")))
         return r
 
     @staticmethod
-    def pgo_use_flags(f, d):
+    def pgo_use_flags(f, d, clang=False):
         """ Update flags with PGO use flags """
         r = list(f)
-        r.extend((PGO_USE_FLAGS.format(d).split(" ")))
+        flagSet = PGO_USE_FLAGS if not clang else PGO_USE_FLAGS_CLANG
+        r.extend((flagSet.format(d).split(" ")))
         return r
 
 
@@ -129,6 +148,8 @@ class YpkgContext:
     files_dir = None
     pconfig = None
     avx2 = False
+    use_pgo = None
+    gen_pgo = None
 
     can_dbginfo = False
 
@@ -240,12 +261,15 @@ class YpkgContext:
 
         if self.spec.pkg_optimize is not None:
             self.build.cflags = Flags.optimize_flags(self.build.cflags,
-                                                     self.spec.pkg_optimize)
+                                                     self.spec.pkg_optimize,
+                                                     self.spec.pkg_clang)
             self.build.cxxflags = Flags.optimize_flags(self.build.cxxflags,
-                                                       self.spec.pkg_optimize)
+                                                       self.spec.pkg_optimize,
+                                                       self.spec.pkg_clang)
         if self.spec.pkg_optimize in ["no-bind-now"]:
             self.build.ldflags = Flags.optimize_flags(self.build.ldflags,
-                                                      self.spec.pkg_optimize)
+                                                      self.spec.pkg_optimize,
+                                                      self.spec.pkg_clang)
 
         # Adjust for emul32 (-m32) build
         if self.emul32:
@@ -298,14 +322,24 @@ class YpkgContext:
     def enable_pgo_generate(self):
         """ Enable GPO generate step """
         pgo_dir = self.get_pgo_dir()
-        self.build.cflags = Flags.pgo_gen_flags(self.build.cflags, pgo_dir)
-        self.build.cxxflags = Flags.pgo_gen_flags(self.build.cxxflags, pgo_dir)
+        self.gen_pgo = True
+        self.build.cflags = Flags.pgo_gen_flags(self.build.cflags,
+                                                pgo_dir,
+                                                self.spec.pkg_clang)
+        self.build.cxxflags = Flags.pgo_gen_flags(self.build.cxxflags,
+                                                  pgo_dir,
+                                                  self.spec.pkg_clang)
 
     def enable_pgo_use(self):
         """ Enable PGO use step """
         pgo_dir = self.get_pgo_dir()
-        self.build.cflags = Flags.pgo_use_flags(self.build.cflags, pgo_dir)
-        self.build.cxxflags = Flags.pgo_use_flags(self.build.cxxflags, pgo_dir)
+        self.use_pgo = True
+        self.build.cflags = Flags.pgo_use_flags(self.build.cflags,
+                                                pgo_dir,
+                                                self.spec.pkg_clang)
+        self.build.cxxflags = Flags.pgo_use_flags(self.build.cxxflags,
+                                                  pgo_dir,
+                                                  self.spec.pkg_clang)
 
     def clean_pgo(self):
         suffixes = ["pgo", "pgo-avx2", "pgo-32", "pgo-32-avx2"]
-- 
2.13.1

